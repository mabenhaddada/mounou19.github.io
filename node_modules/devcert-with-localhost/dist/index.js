"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const fs_1 = require("fs");
const createDebug = require("debug");
const command_exists_1 = require("command-exists");
const constants_1 = require("./constants");
const root_authority_1 = require("./root-authority");
const utils_1 = require("./utils");
const debug = createDebug('devcert');
/**
 * Request an SSL certificate for the given app name signed by the devcert root certificate
 * authority. If devcert has previously generated a certificate for that app name on this machine,
 * it will reuse that certificate.
 *
 * If this is the first time devcert is being run on this machine, it will generate and attempt to
 * install a root certificate authority.
 *
 * Returns a promise that resolves with { keyPath, certPath, key, cert }, where `key` and `cert` are
 * Buffers with the contents of `keyPath` and `certPath`, respectively.
 */
function devcert(appName, options = {}) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        debug(`development cert requested for ${appName}`);
        if (!constants_1.isMac && !constants_1.isLinux && !constants_1.isWindows) {
            throw new Error(`devcert: "${process.platform}" platform not supported`);
        }
        if (!command_exists_1.sync('openssl')) {
            throw new Error('Unable to find openssl - make sure it is installed and available in your PATH');
        }
        let appKeyPath = constants_1.configPath(`${appName}.key`);
        let appCertPath = constants_1.configPath(`${appName}.crt`);
        if (!fs_1.existsSync(constants_1.rootCertPath)) {
            debug('devcert root CA not installed yet, must be first run; installing root CA ...');
            yield root_authority_1.default(options.installCertutil);
        }
        if (!fs_1.existsSync(constants_1.configPath(`${appName}.crt`))) {
            debug(`first request for ${appName} cert, generating and caching ...`);
            utils_1.generateKey(constants_1.configPath(`${appName}.key`));
            generateSignedCertificate(appName, appKeyPath);
        }
        debug(`returning app cert`);
        return {
            keyPath: appKeyPath,
            certPath: appCertPath,
            key: fs_1.readFileSync(appKeyPath),
            cert: fs_1.readFileSync(appCertPath)
        };
    });
}
exports.default = devcert;
// Generate an app certificate signed by the devcert root CA
function generateSignedCertificate(name, keyPath) {
    debug(`generating certificate signing request for ${name}`);
    let csrFile = constants_1.configPath(`${name}.csr`);
    utils_1.openssl(`req -config ${constants_1.opensslConfPath} -subj "/CN=${name}" -key ${keyPath} -out ${csrFile} -new`);
    debug(`generating certificate for ${name} from signing request; signing with devcert root CA`);
    let certPath = constants_1.configPath(`${name}.crt`);
    utils_1.openssl(`ca -config ${constants_1.opensslConfPath} -in ${csrFile} -out ${certPath} -outdir ${constants_1.caCertsDir} -keyfile ${constants_1.rootKeyPath} -cert ${constants_1.rootCertPath} -notext -md sha256 -days 7000 -batch -extensions server_cert`);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL25vcnRobS9EZXZlbG9wbWVudC9vc3MvZGV2Y2VydC8iLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDJCQU9ZO0FBTVoscUNBQXFDO0FBQ3JDLG1EQUF1RDtBQUV2RCwyQ0FXcUI7QUFDckIscURBQTJEO0FBQzNELG1DQUErQztBQUUvQyxNQUFNLEtBQUssR0FBRyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUM7QUFFckM7Ozs7Ozs7Ozs7R0FVRztBQUNILGlCQUFzQyxPQUFlLEVBQUUsVUFBeUMsRUFBRTs7UUFDaEcsS0FBSyxDQUFDLGtDQUFtQyxPQUFRLEVBQUUsQ0FBQyxDQUFDO1FBRXJELEVBQUUsQ0FBQyxDQUFDLENBQUMsaUJBQUssSUFBSSxDQUFDLG1CQUFPLElBQUksQ0FBQyxxQkFBUyxDQUFDLENBQUMsQ0FBQztZQUNyQyxNQUFNLElBQUksS0FBSyxDQUFDLGFBQWMsT0FBTyxDQUFDLFFBQVMsMEJBQTBCLENBQUMsQ0FBQztRQUM3RSxDQUFDO1FBRUQsRUFBRSxDQUFDLENBQUMsQ0FBQyxxQkFBYSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM5QixNQUFNLElBQUksS0FBSyxDQUFDLCtFQUErRSxDQUFDLENBQUM7UUFDbkcsQ0FBQztRQUVELElBQUksVUFBVSxHQUFHLHNCQUFVLENBQUMsR0FBSSxPQUFRLE1BQU0sQ0FBQyxDQUFDO1FBQ2hELElBQUksV0FBVyxHQUFHLHNCQUFVLENBQUMsR0FBSSxPQUFRLE1BQU0sQ0FBQyxDQUFDO1FBRWpELEVBQUUsQ0FBQyxDQUFDLENBQUMsZUFBVSxDQUFDLHdCQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDOUIsS0FBSyxDQUFDLDhFQUE4RSxDQUFDLENBQUM7WUFDdEYsTUFBTSx3QkFBMkIsQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDN0QsQ0FBQztRQUVELEVBQUUsQ0FBQyxDQUFDLENBQUMsZUFBVSxDQUFDLHNCQUFVLENBQUMsR0FBSSxPQUFRLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2hELEtBQUssQ0FBQyxxQkFBc0IsT0FBUSxtQ0FBbUMsQ0FBQyxDQUFDO1lBQ3pFLG1CQUFXLENBQUMsc0JBQVUsQ0FBQyxHQUFJLE9BQVEsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUM1Qyx5QkFBeUIsQ0FBQyxPQUFPLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDakQsQ0FBQztRQUVELEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1FBQzVCLE1BQU0sQ0FBQztZQUNMLE9BQU8sRUFBRSxVQUFVO1lBQ25CLFFBQVEsRUFBRSxXQUFXO1lBQ3JCLEdBQUcsRUFBRSxpQkFBWSxDQUFDLFVBQVUsQ0FBQztZQUM3QixJQUFJLEVBQUUsaUJBQVksQ0FBQyxXQUFXLENBQUM7U0FDaEMsQ0FBQztJQUVKLENBQUM7Q0FBQTtBQWpDRCwwQkFpQ0M7QUFFRCw0REFBNEQ7QUFDNUQsbUNBQW1DLElBQVksRUFBRSxPQUFlO0lBQzlELEtBQUssQ0FBQyw4Q0FBK0MsSUFBSyxFQUFFLENBQUMsQ0FBQztJQUM5RCxJQUFJLE9BQU8sR0FBRyxzQkFBVSxDQUFDLEdBQUksSUFBSyxNQUFNLENBQUMsQ0FBQTtJQUN6QyxlQUFPLENBQUMsZUFBZ0IsMkJBQWdCLGVBQWdCLElBQUssVUFBVyxPQUFRLFNBQVUsT0FBUSxPQUFPLENBQUMsQ0FBQztJQUMzRyxLQUFLLENBQUMsOEJBQStCLElBQUsscURBQXFELENBQUMsQ0FBQztJQUNqRyxJQUFJLFFBQVEsR0FBRyxzQkFBVSxDQUFDLEdBQUksSUFBSyxNQUFNLENBQUMsQ0FBQztJQUMzQyxlQUFPLENBQUMsY0FBZSwyQkFBZ0IsUUFBUyxPQUFRLFNBQVUsUUFBUyxZQUFhLHNCQUFXLGFBQWMsdUJBQVksVUFBVyx3QkFBYSwrREFBK0QsQ0FBQyxDQUFBO0FBQ3ZOLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICByZWFkRmlsZVN5bmMsXG4gIHJlYWRkaXJTeW5jLFxuICB3cml0ZUZpbGVTeW5jLFxuICB1bmxpbmtTeW5jLFxuICBjaG1vZFN5bmMsXG4gIGV4aXN0c1N5bmNcbn0gZnJvbSAnZnMnO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IGV4ZWMsIGV4ZWNTeW5jLCBFeGVjU3luY09wdGlvbnMgfSBmcm9tICdjaGlsZF9wcm9jZXNzJztcbmltcG9ydCAqIGFzIHRtcCBmcm9tICd0bXAnO1xuaW1wb3J0ICogYXMgQ29uZmlnc3RvcmUgZnJvbSAnY29uZmlnc3RvcmUnO1xuaW1wb3J0ICogYXMgbWtkaXJwIGZyb20gJ21rZGlycCc7XG5pbXBvcnQgKiBhcyBjcmVhdGVEZWJ1ZyBmcm9tICdkZWJ1Zyc7XG5pbXBvcnQgeyBzeW5jIGFzIGNvbW1hbmRFeGlzdHMgfSBmcm9tICdjb21tYW5kLWV4aXN0cyc7XG5cbmltcG9ydCB7XG4gIGlzTWFjLFxuICBpc0xpbnV4LFxuICBpc1dpbmRvd3MsXG4gIGNvbmZpZ0RpcixcbiAgY29uZmlnUGF0aCxcbiAgb3BlbnNzbENvbmZUZW1wbGF0ZSxcbiAgb3BlbnNzbENvbmZQYXRoLFxuICByb290S2V5UGF0aCxcbiAgcm9vdENlcnRQYXRoLFxuICBjYUNlcnRzRGlyXG59IGZyb20gJy4vY29uc3RhbnRzJztcbmltcG9ydCBpbnN0YWxsQ2VydGlmaWNhdGVBdXRob3JpdHkgZnJvbSAnLi9yb290LWF1dGhvcml0eSc7XG5pbXBvcnQgeyBvcGVuc3NsLCBnZW5lcmF0ZUtleSB9IGZyb20gJy4vdXRpbHMnO1xuXG5jb25zdCBkZWJ1ZyA9IGNyZWF0ZURlYnVnKCdkZXZjZXJ0Jyk7XG5cbi8qKlxuICogUmVxdWVzdCBhbiBTU0wgY2VydGlmaWNhdGUgZm9yIHRoZSBnaXZlbiBhcHAgbmFtZSBzaWduZWQgYnkgdGhlIGRldmNlcnQgcm9vdCBjZXJ0aWZpY2F0ZVxuICogYXV0aG9yaXR5LiBJZiBkZXZjZXJ0IGhhcyBwcmV2aW91c2x5IGdlbmVyYXRlZCBhIGNlcnRpZmljYXRlIGZvciB0aGF0IGFwcCBuYW1lIG9uIHRoaXMgbWFjaGluZSxcbiAqIGl0IHdpbGwgcmV1c2UgdGhhdCBjZXJ0aWZpY2F0ZS5cbiAqXG4gKiBJZiB0aGlzIGlzIHRoZSBmaXJzdCB0aW1lIGRldmNlcnQgaXMgYmVpbmcgcnVuIG9uIHRoaXMgbWFjaGluZSwgaXQgd2lsbCBnZW5lcmF0ZSBhbmQgYXR0ZW1wdCB0b1xuICogaW5zdGFsbCBhIHJvb3QgY2VydGlmaWNhdGUgYXV0aG9yaXR5LlxuICpcbiAqIFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB7IGtleVBhdGgsIGNlcnRQYXRoLCBrZXksIGNlcnQgfSwgd2hlcmUgYGtleWAgYW5kIGBjZXJ0YCBhcmVcbiAqIEJ1ZmZlcnMgd2l0aCB0aGUgY29udGVudHMgb2YgYGtleVBhdGhgIGFuZCBgY2VydFBhdGhgLCByZXNwZWN0aXZlbHkuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIGRldmNlcnQoYXBwTmFtZTogc3RyaW5nLCBvcHRpb25zOiB7IGluc3RhbGxDZXJ0dXRpbD86IGJvb2xlYW4gfSA9IHt9KSB7XG4gIGRlYnVnKGBkZXZlbG9wbWVudCBjZXJ0IHJlcXVlc3RlZCBmb3IgJHsgYXBwTmFtZSB9YCk7XG5cbiAgaWYgKCFpc01hYyAmJiAhaXNMaW51eCAmJiAhaXNXaW5kb3dzKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBkZXZjZXJ0OiBcIiR7IHByb2Nlc3MucGxhdGZvcm0gfVwiIHBsYXRmb3JtIG5vdCBzdXBwb3J0ZWRgKTtcbiAgfVxuXG4gIGlmICghY29tbWFuZEV4aXN0cygnb3BlbnNzbCcpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdVbmFibGUgdG8gZmluZCBvcGVuc3NsIC0gbWFrZSBzdXJlIGl0IGlzIGluc3RhbGxlZCBhbmQgYXZhaWxhYmxlIGluIHlvdXIgUEFUSCcpO1xuICB9XG5cbiAgbGV0IGFwcEtleVBhdGggPSBjb25maWdQYXRoKGAkeyBhcHBOYW1lIH0ua2V5YCk7XG4gIGxldCBhcHBDZXJ0UGF0aCA9IGNvbmZpZ1BhdGgoYCR7IGFwcE5hbWUgfS5jcnRgKTtcblxuICBpZiAoIWV4aXN0c1N5bmMocm9vdENlcnRQYXRoKSkge1xuICAgIGRlYnVnKCdkZXZjZXJ0IHJvb3QgQ0Egbm90IGluc3RhbGxlZCB5ZXQsIG11c3QgYmUgZmlyc3QgcnVuOyBpbnN0YWxsaW5nIHJvb3QgQ0EgLi4uJyk7XG4gICAgYXdhaXQgaW5zdGFsbENlcnRpZmljYXRlQXV0aG9yaXR5KG9wdGlvbnMuaW5zdGFsbENlcnR1dGlsKTtcbiAgfVxuXG4gIGlmICghZXhpc3RzU3luYyhjb25maWdQYXRoKGAkeyBhcHBOYW1lIH0uY3J0YCkpKSB7XG4gICAgZGVidWcoYGZpcnN0IHJlcXVlc3QgZm9yICR7IGFwcE5hbWUgfSBjZXJ0LCBnZW5lcmF0aW5nIGFuZCBjYWNoaW5nIC4uLmApO1xuICAgIGdlbmVyYXRlS2V5KGNvbmZpZ1BhdGgoYCR7IGFwcE5hbWUgfS5rZXlgKSk7XG4gICAgZ2VuZXJhdGVTaWduZWRDZXJ0aWZpY2F0ZShhcHBOYW1lLCBhcHBLZXlQYXRoKTtcbiAgfVxuXG4gIGRlYnVnKGByZXR1cm5pbmcgYXBwIGNlcnRgKTtcbiAgcmV0dXJuIHtcbiAgICBrZXlQYXRoOiBhcHBLZXlQYXRoLFxuICAgIGNlcnRQYXRoOiBhcHBDZXJ0UGF0aCxcbiAgICBrZXk6IHJlYWRGaWxlU3luYyhhcHBLZXlQYXRoKSxcbiAgICBjZXJ0OiByZWFkRmlsZVN5bmMoYXBwQ2VydFBhdGgpXG4gIH07XG5cbn1cblxuLy8gR2VuZXJhdGUgYW4gYXBwIGNlcnRpZmljYXRlIHNpZ25lZCBieSB0aGUgZGV2Y2VydCByb290IENBXG5mdW5jdGlvbiBnZW5lcmF0ZVNpZ25lZENlcnRpZmljYXRlKG5hbWU6IHN0cmluZywga2V5UGF0aDogc3RyaW5nKTogdm9pZCB7XG4gIGRlYnVnKGBnZW5lcmF0aW5nIGNlcnRpZmljYXRlIHNpZ25pbmcgcmVxdWVzdCBmb3IgJHsgbmFtZSB9YCk7XG4gIGxldCBjc3JGaWxlID0gY29uZmlnUGF0aChgJHsgbmFtZSB9LmNzcmApXG4gIG9wZW5zc2woYHJlcSAtY29uZmlnICR7IG9wZW5zc2xDb25mUGF0aCB9IC1zdWJqIFwiL0NOPSR7IG5hbWUgfVwiIC1rZXkgJHsga2V5UGF0aCB9IC1vdXQgJHsgY3NyRmlsZSB9IC1uZXdgKTtcbiAgZGVidWcoYGdlbmVyYXRpbmcgY2VydGlmaWNhdGUgZm9yICR7IG5hbWUgfSBmcm9tIHNpZ25pbmcgcmVxdWVzdDsgc2lnbmluZyB3aXRoIGRldmNlcnQgcm9vdCBDQWApO1xuICBsZXQgY2VydFBhdGggPSBjb25maWdQYXRoKGAkeyBuYW1lIH0uY3J0YCk7XG4gIG9wZW5zc2woYGNhIC1jb25maWcgJHsgb3BlbnNzbENvbmZQYXRoIH0gLWluICR7IGNzckZpbGUgfSAtb3V0ICR7IGNlcnRQYXRoIH0gLW91dGRpciAkeyBjYUNlcnRzRGlyIH0gLWtleWZpbGUgJHsgcm9vdEtleVBhdGggfSAtY2VydCAkeyByb290Q2VydFBhdGggfSAtbm90ZXh0IC1tZCBzaGEyNTYgLWRheXMgNzAwMCAtYmF0Y2ggLWV4dGVuc2lvbnMgc2VydmVyX2NlcnRgKVxufVxuIl19